/*
 * Copyright (c) 2015 XING AG (http://xing.com/)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

package com.xing.android.sdk.resources;

import com.xing.android.sdk.CallSpec;
import com.xing.android.sdk.ErrorBody;
import com.xing.android.sdk.Resource;
import com.xing.android.sdk.XingApi;
import com.xing.android.sdk.model.PictureUpload;

/**
 * This is a representation of the Profile Editing API.
 * It has all the functionalities that a user might need to edit his profile.
 *
 * @author daniel.hartwich
 * @see <a href="https://dev.xing.com/docs/resources#profile-editing"></a>
 */
public class ProfileEditingResource extends Resource {

    /**
     * Creates a resource instance. This should be the only constructor declared by child classes.
     */
    protected ProfileEditingResource(XingApi api) {
        super(api);
    }

    /**
     * Update a users profile information.
     *
     * <table>
     * <h4>Possible OPTIONAL parameters</h4>
     * <tr>
     * <th>Paramter Name</th>
     * <th><b>Description</b></th>
     * </tr>
     * <tr>
     * <td><b>academic_title</b></td>
     * <td>Updates the users academic title. Must be one of "Dr.", "Prof.", "Prof. Dr.", "Ing.", "Dipl.-Ing.", "Mag."
     * or an empty string. Use empty string to delete value.</td>
     * </tr>
     * <tr>
     * <td><b>haves</b></td>
     * <td>List of things you have separated by comma (must not be longer than 2048 characters, each item must not
     * be longer than 200 characters, each item must contain a non-whitespace, not more than 200 items)</td>
     * </tr>
     * <tr>
     * <td><b>interests</b></td>
     * <td>List of things you are interested in separated by comma (must not be longer than 2048 characters,
     * each item must not be longer than 200 characters, each item must contain a non-whitespace, not more than 200
     * items).</td>
     * </tr>
     * <tr>
     * <td><b>organisation_member</b></td>
     * <td>List of organizations you are a member of separated by comma (must not be longer than 2048
     * characters, each item must not be longer than 200 characters, each item must contain a non-whitespace, not more
     * than 200 items).</td>
     * </tr>
     * <tr>
     * <td><b>wants</b></td>
     * <td>List of things you want separated by comma (must not be longer than 2048 characters, each item must not
     * be longer than 200 characters, each item must contain a non-whitespace, not more than 200 items).</td>
     * </tr>
     * </table>
     */
    public CallSpec<String, ErrorBody> updateUserGeneralInformation() {
        return Resource.<String, ErrorBody>newPutSpec(api, "v1/users/me", true)
              .responseAs(String.class)
              .build();
    }

    /**
     * Update a users picture.
     *
     * Uploads a new photo and defines it as the users profile picture.
     * Pictures have to be less than 20 MB large. The supported image formats are image/jpeg and image/png.
     *
     * It is sent as application/json with the image data Base64 encoded in the body:
     * { "photo": { "file_name": "test.jpg", "mime_type": "image/jpeg", "content": "Base64 encoded image data" } }
     *
     * <table>
     * <h4>Possible OPTIONAL parameters</h4>
     * <tr>
     * <th>Paramter Name</th>
     * <th><b>Description</b></th>
     * </tr>
     * <tr>
     * <td><b>photo</b></td>
     * <td>The users new photo.</td>
     * </tr>
     * </table>
     *
     * <p>The required PictureUpload Object can be generated by using {@link PictureUpload#pictureUploadJPEG(String,
     * byte[])} or {@link PictureUpload#pictureUploadPNG(String, byte[])} </p>
     */
    public CallSpec<String, ErrorBody> updateUsersProfilePicture(PictureUpload pictureUpload) {
        return Resource.<String, ErrorBody>newPutSpec(api, "v1/users/me/photo", true)
              .responseAs(String.class)
              .body(PictureUpload.class, pictureUpload)
              .build();
    }

    /**
     * Delete the user's current profile picture.
     */
    public CallSpec<String, ErrorBody> deleteUsersProfilePicture() {
        return Resource.<String, ErrorBody>newDeleteSpec(api, "v1/users/me/photo")
              .responseAs(String.class)
              .build();
    }

    /**
     * Get profile picture upload progress.
     *
     * After a photo is uploaded via the update users profile picture call, you can poll this call to find the
     * current upload progress
     * This call will return the upload progress as a percentage.
     * Possible values for the status field are: IN_PROGRESS, DONE, FAILED.
     */
    public CallSpec<String, ErrorBody> getProfilePictureUploadProgress() {
        return Resource.<String, ErrorBody>newGetSpec(api, "/v1/users/me/photo/progress")
              .responseAs(String.class)
              .build();
    }

    /**
     * Update the users private address.
     *
     * Updates the private address of the current user. If a field is not passed, it will not be updated or be
     * removed. To delete fields you should provide an empty value along with the field.
     *
     * <table>
     * <h4>Possible OPTIONAL parameters</h4>
     * <tr>
     * <th>Paramter Name</th>
     * <th><b>Description</b></th>
     * </tr>
     * <tr>
     * <td><b>city</b></td>
     * <td>This field can not be unset and may contain up to 49 characters and must have at least 2 characters</td>
     * </tr>
     * <tr>
     * <td><b>country</b></td>
     * <td>This field can not be unset and must be an ISO-3166 country code (some countries require a province to be
     * set)</td>
     * </tr>
     * <tr>
     * <td><b>email</b></td>
     * <td>This field can be empty or must be a valid email address (foo@example.com)</td>
     * </tr>
     * <tr>
     * <td><b>fax</b></td>
     * <td>This field can be empty or must be the country code, area code and number separated by a pipe character
     * (|)</td>
     * </tr>
     * <tr>
     * <td><b>mobile_phone</b></td>
     * <td>This field can be empty or must be the country code, area code and number separated by a pipe character
     * (|)</td>
     * </tr>
     * <tr>
     * <td><b>phone</b></td>
     * <td>This field can be empty or must be the country code, area code and number separated by a pipe character
     * (|)</td>
     * </tr>
     * <tr>
     * <td><b>province</b></td>
     * <td>This field can be empty or may contain up to 79 characters</td>
     * </tr>
     * <tr>
     * <td><b>street</b></td>
     * <td>This field can be empty or may contain up to 49 characters</td>
     * </tr>
     * <tr>
     * <td><b>zip_code</b></td>
     * <td>This field can be empty or may contain up to 19 characters</td>
     * </tr>
     * </table>
     */
    public CallSpec<String, ErrorBody> updateUsersPrivateAddress() {
        return Resource.<String, ErrorBody>newPutSpec(api, "/v1/users/me/private_address", true)
              .responseAs(String.class)
              .build();
    }

    /**
     * Update the users business address.
     *
     * Updates the business address of the current user. If a field is not passed, it will not be updated or be
     * removed. To delete fields you should provide an empty value along with the field.
     *
     * <table>
     * <h4>Possible OPTIONAL parameters</h4>
     * <tr>
     * <th>Paramter Name</th>
     * <th><b>Description</b></th>
     * </tr>
     * <tr>
     * <td><b>city</b></td>
     * <td>This field can not be unset and may contain up to 49 characters and must have at least 2 characters</td>
     * </tr>
     * <tr>
     * <td><b>country</b></td>
     * <td>This field can not be unset and must be an ISO-3166 country code (some countries require a province to be
     * set)</td>
     * </tr>
     * <tr>
     * <td><b>email</b></td>
     * <td>This field can be empty or must be a valid email address (foo@example.com)</td>
     * </tr>
     * <tr>
     * <td><b>fax</b></td>
     * <td>This field can be empty or must be the country code, area code and number separated by a pipe character
     * (|)</td>
     * </tr>
     * <tr>
     * <td><b>mobile_phone</b></td>
     * <td>This field can be empty or must be the country code, area code and number separated by a pipe character
     * (|)</td>
     * </tr>
     * <tr>
     * <td><b>phone</b></td>
     * <td>This field can be empty or must be the country code, area code and number separated by a pipe character
     * (|)</td>
     * </tr>
     * <tr>
     * <td><b>province</b></td>
     * <td>This field can be empty or may contain up to 79 characters</td>
     * </tr>
     * <tr>
     * <td><b>street</b></td>
     * <td>This field can be empty or may contain up to 49 characters</td>
     * </tr>
     * <tr>
     * <td><b>zip_code</b></td>
     * <td>This field can be empty or may contain up to 19 characters</td>
     * </tr>
     * </table>
     */
    public CallSpec<String, ErrorBody> updateUsersBusinessAddress() {
        return Resource.<String, ErrorBody>newPutSpec(api, "/v1/users/me/business_address", true)
              .responseAs(String.class)
              .build();
    }

    /**
     * Create a school.
     *
     * Add a new school to the list of schools in the users profile.
     *
     * <table>
     * <h4>Possible OPTIONAL parameters</h4>
     * <tr>
     * <th>Paramter Name</th>
     * <th><b>Description</b></th>
     * </tr>
     * <tr>
     * <td><b>begin_date</b></td>
     * <td>Start date in format YYYY or YYYY-MM.</td>
     * </tr>
     * <tr>
     * <td><b>degree</b></td>
     * <td>The (future) degree. Must be less than 80 characters long.</td>
     * </tr>
     * <tr>
     * <td><b>end_date</b></td>
     * <td>End date in format YYYY or YYYY-MM, must be greater than begin_date.</td>
     * </tr>
     * <tr>
     * <td><b>notes</b></td>
     * <td>Additional notes such as specialized subjects. Must be less than 80 characters long.</td>
     * </tr>
     * <tr>
     * <td><b>subject</b></td>
     * <td>Describes the field of study. If you want to set this school as primary, you need to supply a subject. Must
     * be less than 80 characters long.</td>
     * </tr>
     * </table>
     *
     * @param name Name of the school. Must be less than 80 characters long.
     */
    public CallSpec<String, ErrorBody> addSchoolToUsersProfile(String name) {
        return Resource.<String, ErrorBody>newPostSpec(api, "/v1/users/me/educational_background/schools", true)
              .formField("name", name)
              .build();
    }
}
